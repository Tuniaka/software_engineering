"""
@brief –ü—Ä–æ—Å—Ç–æ–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º SpeechRecognition –∏ Streamlit.

@file voice_recognition_app.py
@author Rayzedan, sard-nas, Tuniaka
@date May 2024

–≠—Ç–æ—Ç –∫–æ–¥ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ —á–µ—Ä–µ–∑ –º–∏–∫—Ä–æ—Ñ–æ–Ω
—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫ SpeechRecognition –∏ Streamlit.
"""

import speech_recognition as sr
import streamlit as st
import pyperclip
import base64
import time


class SpeechRecognition:
    def __init__(self):
        self.recognizer = sr.Recognizer()
        self.recognizer.dynamic_energy_threshold = False

    def recognize(self, source):
        """
        @brief –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ —á–µ—Ä–µ–∑ –º–∏–∫—Ä–æ—Ñ–æ–Ω.

        @param source: –ú–∏–∫—Ä–æ—Ñ–æ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏.
        @return –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
        """
        self.recognizer.adjust_for_ambient_noise(source, duration=1)
        audio = self.recognizer.listen(source, timeout=5.0)
        try:
            text = self.recognizer.recognize_google(audio, language="ru-RU")
            return text
        except sr.UnknownValueError:
            return "–†–µ—á—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞"
        except BaseException as error:
            print('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {}'.format(error))
            return "–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"


class VoiceRecognitionApp:
    def __init__(self):
        self.speech_recognition = SpeechRecognition()

    def on_copy_click(self, text):
        """
        @brief –ö–æ–ø–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –∏ –≤—ã–≤–æ–¥–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.

        @param text: –¢–µ–∫—Å—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è.
        """
        pyperclip.copy(text)
        st.toast(f"–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞: {text}", icon='‚úÖ')

    def on_save_click(self, text):
        """
        @brief –ö–æ–ø–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞.

        @param text: –¢–µ–∫—Å—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è.
        """
        b64 = base64.b64encode(text.encode()).decode()
        filename = "recognized_text"
        timestr = time.strftime("%Y%m%d-%H%M%S")
        new_filename = "{}_{}_.txt".format(filename, timestr)
        st.markdown("#### –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ ###")
        href = f'<a href="data:file/txt;base64,{b64}" download="{new_filename}">–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è</a>'
        st.markdown(href, unsafe_allow_html=True)

    def command(self):
        """
        @brief –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ —á–µ—Ä–µ–∑ –º–∏–∫—Ä–æ—Ñ–æ–Ω.

        @return –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
        """
        with sr.Microphone() as source:
            st.write("–°–ª—É—à–∞—é –≥–æ–ª–æ—Å...")
            text = self.speech_recognition.recognize(source)
        return text

    def create_web(self):
        """
        @brief –°–æ–∑–¥–∞–µ—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏.
        """
        st.title("–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏")
        st.write("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å")

        if st.button("–ó–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å"):
            text = self.command()
            if text:
                st.write("–¢–µ–∫—Å—Ç:", text)
                right, left = st.columns([1, 6])
                with right:
                    st.button("üìã", on_click=self.on_copy_click, args=(text,))
                with left:
                    st.button("üì•", on_click=self.on_save_click, args=(text,))


if __name__ == '__main__':
    app = VoiceRecognitionApp()
    app.create_web()
